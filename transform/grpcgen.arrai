# parse command line params
let syslApp = //os.args(1);
let jsonPath = //os.args(2);
let syslBytes = //os.file(jsonPath);
let syslData = //encoding.json.decode(syslBytes);

let writeProto = \syslJson \appName
    # include proto utils
    let sysl = //{./sysl};
    let grpc = //{./grpc};
    let proto = //{./proto};

    # https://github.com/anz-bank/sysl/blob/master/pkg/sysl/sysl.proto
    # sysl data to parse
    let app = syslJson('apps')(appName);
    let endpoints = app('endpoints');
    let types = app('types');
    $`${cond {(sysl.isGrpc(app)): $`
        //   THIS IS AUTOGENERATED BY sysl   //
        syntax = "proto3";

        package ${app('attrs')('package')('s').s};

        option go_package = '${app('attrs')('package')('s').s}';

        ${cond {(sysl.exists(app, 'types')): $`
            ${
                //rel.union(
                    types >> proto.imports(.('tuple')?('attrDefs')?:{}
                ) => .@value) where . != {} orderby .::\i:\n
            }
       `}}
        // types for ${app('name')('part').a(0).s}
        ${cond {(sysl.exists(app, 'types')): $`
            ${
                types => $`
                message ${.@} {
                    ${
                        cond {
                            (sysl.exists(.@value, 'typeRef')): proto.alias_fields(.@value, .@),
                            _: proto.fields(.@value('tuple')?('attrDefs')?:{})
                        }
                        orderby .::\i:
                    }
                }` orderby .::\n\i:
            }
        `}}
        // service for ${app('name')('part').a(0).s}
        ${cond {(sysl.exists(app, 'endpoints')): $`
            service ${app('name')('part').a(0).s} {
                ${
                    endpoints => $`
                        ${
                            cond {
                                (!//seq.has_prefix('enum', .@)): $`
                                rpc ${
                                    proto.ep_info(.@value).method
                                    }(${
                                        proto.ep_info(.@value).param
                                    }) returns (${
                                            proto.ep_info(.@value).return}) {}`
                            }
                        } 
                    ` orderby .::\n\i:
                }
            }
            ${
                endpoints => $`
                    ${
                        cond {
                            (//seq.has_prefix('enum', .@)): $`
                            ${.@} {
                                ${
                                    (.@value('stmt').a => (.@item('action')?('action')?.s:'') ++ ';')
                                        where . != '' orderby let [[id]] = //re.compile(`\d+`).match(.); //eval.value(id) ::\i:
                                }
                            }`
                        }
                    } 
                    ` orderby .::\n\i:
            }
        `}}
    `}}`;

$`${writeProto(syslData, syslApp)}`
